<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-04-04T15:12:29+02:00</updated><id>/feed.xml</id><entry><title type="html">Learning Big O notation as a Javascript developer</title><link href="/2020/04/04/learn-big-o.html" rel="alternate" type="text/html" title="Learning Big O notation as a Javascript developer" /><published>2020-04-04T00:00:00+02:00</published><updated>2020-04-04T00:00:00+02:00</updated><id>/2020/04/04/learn-big-o</id><content type="html" xml:base="/2020/04/04/learn-big-o.html">&lt;p&gt;We all know that while there are multiple solutions to a given problem, some solutions are better than others and could have a significant impact on the performance of your software. It’s easy to overlook perfomance as long as the desired functionality is achieved and in a lot of small to mid-scale projects, performance can be negligible. However when building large-scale applications or software that processes large amounts of data, the code handling the processing should be efficient and performant.&lt;/p&gt;

&lt;p&gt;This is why Big O notation is necessary.&lt;/p&gt;

&lt;p&gt;Big O notation is a mathematical notation that denotes the efficiency of an algorithm and specifically takes into account the worst-case scenario. Big-O consists of time and space complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time complexity&lt;/strong&gt; describes the execution time of an algorithm and &lt;strong&gt;Space complexity&lt;/strong&gt; describes the space it requires.&lt;/p&gt;

&lt;p&gt;Big O notations is grouped together with data structures as a means to organize, manage, and store data in a format that enables efficient access and modification. Data structures are used in almost every program or software system and very common examples include arrays, linked lists and graphs. For example, the DOM (Document Object Model) of an HTML document is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_(data_structure)&quot;&gt;tree structure&lt;/a&gt; consisting of nodes.&lt;/p&gt;

&lt;p&gt;Have you ever wondered what are the time and space complexity of javascript native functions such as &lt;code&gt;indexOf&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt; and how to use them efficiently?&lt;/p&gt;

&lt;p&gt;Although javascript built-in functions are quite perfomant and should definitely be used in place of custom solutions, they can yield terrible performance if not used correctly. For example using &lt;code class=&quot;highlighter-rouge&quot;&gt;indexOf&lt;/code&gt; inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop has a time complexity of o(n^2) which is very inefficient with large sets of data.&lt;/p&gt;

&lt;p&gt;It takes time to understand and consciously incorporate Big O notation as part of your regular development process. However here are a few tips to help you get started:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoid nested loops:&lt;/strong&gt; nested loops can a negative impact on the perfomance of your code when working with large data sets. It’s better to with work with multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops that are not nested as the time complexity will always be o(kn) = o(n), where k is the number of loops.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Built-in functions:&lt;/strong&gt; it is always safe to use built-in functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; as they have been optimized by the JavaScript engines that run them. Optionally, &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; ultility library provides very useful functions for common programming tasks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Opt for object instead of array of objects:&lt;/strong&gt; sometimes, it’s easier to work with objects instead of arrays if you can and want to associate a key or id with a data set for easy access. Using the native functions &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.values&lt;/code&gt; facilitates interating over object properties and values.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Learn how to use sorting and search algorithms:&lt;/strong&gt; I’m sure you’ve already heard about &lt;em&gt;binary search&lt;/em&gt;, &lt;em&gt;merge sort&lt;/em&gt; and &lt;em&gt;quick sort&lt;/em&gt;. Although a lot of built-in functions and libraries use these alogirthms internally and in most cases you might not need to write a sorting algorithm, it is important to have a fundamental understanding of sorting and search algorithms in the event that you may have to work with a complex data structure.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use variables efficiently:&lt;/strong&gt; a variable is a name of storage location. Variables should be declared only when need and ideally, as local as possible. Keep in mind that objects that are still referenced by your application are not cleaned up by the garbage collector.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use a javascript linter:&lt;/strong&gt; javascript linters are benefical in optimizing your code and improve quality. JSLint and ESLint are two very popular lintes. There are also may good styleguide to use when configuring your linter. I always recommend the &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;airbnb styleguide&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Read open-source coded and practice solving problem:&lt;/strong&gt; reading open-source code provides a wealth of information and websites such Codewars can be beneficial improve your problem-solving skills. Keep in mind you’ll only get better the more code you write.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Should you consider time and space complexity all of your projects? In my opinion, the answer is &lt;strong&gt;&lt;em&gt;Yes!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It doesn’t matter the size of your application. Understanding Big O notation, code optimization and efficient resource usage is an essential skill for all developers wanting to build scalable and performant applications with minimal effort.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bigocheatsheet.com/&quot;&gt;Big-O Cheat Sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adrianmejia.com/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/&quot;&gt;Tutorial series: Learning Data Structures and Algorithms (DSA) for Beginners&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.to/b0nbon1/understanding-big-o-notation-with-javascript-25mc&quot;&gt;Understanding Big-O Notation With JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.interviewcake.com/article/python/big-o-notation-time-and-space-complexity?&quot;&gt;The idea behind big O notation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codewars.com/&quot;&gt;Codewars&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;&lt;strong&gt;High Performance JavaScript (Build Faster Web Application Interfaces)&lt;/strong&gt;&lt;/em&gt; by Nicholas C. Zakas&lt;/li&gt;
&lt;/ul&gt;</content><author><name>thesimplearchitect</name></author><category term="performance" /><category term="javascript" /><category term="big-o-notation" /><category term="data-structures" /><summary type="html">We all know that while there are multiple solutions to a given problem, some solutions are better than others and could have a significant impact on the performance of your software. It’s easy to overlook perfomance as long as the desired functionality is achieved and in a lot of small to mid-scale projects, performance can be negligible. However when building large-scale applications or software that processes large amounts of data, the code handling the processing should be efficient and performant. This is why Big O notation is necessary. Big O notation is a mathematical notation that denotes the efficiency of an algorithm and specifically takes into account the worst-case scenario. Big-O consists of time and space complexity. Time complexity describes the execution time of an algorithm and Space complexity describes the space it requires. Big O notations is grouped together with data structures as a means to organize, manage, and store data in a format that enables efficient access and modification. Data structures are used in almost every program or software system and very common examples include arrays, linked lists and graphs. For example, the DOM (Document Object Model) of an HTML document is a tree structure consisting of nodes. Have you ever wondered what are the time and space complexity of javascript native functions such as indexOf, find and includes and how to use them efficiently? Although javascript built-in functions are quite perfomant and should definitely be used in place of custom solutions, they can yield terrible performance if not used correctly. For example using indexOf inside a for loop has a time complexity of o(n^2) which is very inefficient with large sets of data. It takes time to understand and consciously incorporate Big O notation as part of your regular development process. However here are a few tips to help you get started: Avoid nested loops: nested loops can a negative impact on the perfomance of your code when working with large data sets. It’s better to with work with multiple for loops that are not nested as the time complexity will always be o(kn) = o(n), where k is the number of loops. Use Built-in functions: it is always safe to use built-in functions such as map, filter, reduce, find, forEach and sort as they have been optimized by the JavaScript engines that run them. Optionally, Lodash ultility library provides very useful functions for common programming tasks. Opt for object instead of array of objects: sometimes, it’s easier to work with objects instead of arrays if you can and want to associate a key or id with a data set for easy access. Using the native functions Object.keys and Object.values facilitates interating over object properties and values. Learn how to use sorting and search algorithms: I’m sure you’ve already heard about binary search, merge sort and quick sort. Although a lot of built-in functions and libraries use these alogirthms internally and in most cases you might not need to write a sorting algorithm, it is important to have a fundamental understanding of sorting and search algorithms in the event that you may have to work with a complex data structure. Use variables efficiently: a variable is a name of storage location. Variables should be declared only when need and ideally, as local as possible. Keep in mind that objects that are still referenced by your application are not cleaned up by the garbage collector. Use a javascript linter: javascript linters are benefical in optimizing your code and improve quality. JSLint and ESLint are two very popular lintes. There are also may good styleguide to use when configuring your linter. I always recommend the airbnb styleguide. Read open-source coded and practice solving problem: reading open-source code provides a wealth of information and websites such Codewars can be beneficial improve your problem-solving skills. Keep in mind you’ll only get better the more code you write. Should you consider time and space complexity all of your projects? In my opinion, the answer is Yes! It doesn’t matter the size of your application. Understanding Big O notation, code optimization and efficient resource usage is an essential skill for all developers wanting to build scalable and performant applications with minimal effort. Resources Big-O Cheat Sheet Tutorial series: Learning Data Structures and Algorithms (DSA) for Beginners Understanding Big-O Notation With JavaScript The idea behind big O notation Codewars Leetcode High Performance JavaScript (Build Faster Web Application Interfaces) by Nicholas C. Zakas</summary></entry><entry><title type="html">How to add JavaScript to a page</title><link href="/2020/02/11/async-scripts.html" rel="alternate" type="text/html" title="How to add JavaScript to a page" /><published>2020-02-11T00:00:00+01:00</published><updated>2020-02-11T00:00:00+01:00</updated><id>/2020/02/11/async-scripts</id><content type="html" xml:base="/2020/02/11/async-scripts.html">&lt;p&gt;How and where you load external scripts on a page can affect page load speed and performance. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags were usually placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section and quite often without only the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; attributes. These external Scripts are loaded and executed synchronously, meaning the HTML parser is forced to wait for the resource to be fetched. 
If there is an issue with the server response, this could result in page blocking and a terrible user experience. In order to avoid this, it is recommended to defer javascript loading and execution until the page is rendered.&lt;/p&gt;

&lt;p&gt;One common solution is to place the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag to ensure that the DOM is loaded first before executing any javascript. However, there are other equally good solutions.&lt;/p&gt;

&lt;h2 id=&quot;aysnc-and-defer-attributes&quot;&gt;aysnc and defer attributes&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags are placed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section with attributes &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;. These atrributes tell the browser how to fetch and execute external scripts.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt; attribute tells the browser to load the script but not execute any Javacript until the DOM is ready (the document has been fully parsed and before the &lt;code class=&quot;highlighter-rouge&quot;&gt;DOMContentLoaded&lt;/code&gt; event is fired).&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; attribute tells the browser to execute the external script asychronously. The HTML parser can continue parsing the page without
waiting for the script to be executed.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;small&gt;Check &lt;a href=&quot;https://caniuse.com&quot; rel=&quot;noopenner noreferrer&quot; target=&quot;_blank&quot;&gt;caniuse.com&lt;/a&gt; for browser compatibility of &lt;a href=&quot;https://caniuse.com/#search=async&quot; rel=&quot;noopenner noreferrer&quot; target=&quot;_blank&quot;&gt;async&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#search=defer&quot; rel=&quot;noopenner noreferrer&quot; target=&quot;_blank&quot;&gt;defer&lt;/a&gt; attributes.&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;dynamic-insert&quot;&gt;Dynamic insert&lt;/h2&gt;

&lt;p&gt;There are some cases where you only want to load a script in certain situations. This is known as &lt;strong&gt;on-demand loading&lt;/strong&gt; to avoid unnecessary requests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insertScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scriptInDoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://....&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;scriptInDoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scriptInDoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Always incorporate JavaScript asynchronously and only load external scripts at the point when they are needed to avoid extra network requests.&lt;/p&gt;</content><author><name>thesimplearchitect</name></author><category term="javascript" /><category term="html" /><category term="performance" /><summary type="html">How and where you load external scripts on a page can affect page load speed and performance. &amp;lt;script&amp;gt; tags were usually placed in the &amp;lt;head&amp;gt; section and quite often without only the src attributes. These external Scripts are loaded and executed synchronously, meaning the HTML parser is forced to wait for the resource to be fetched. If there is an issue with the server response, this could result in page blocking and a terrible user experience. In order to avoid this, it is recommended to defer javascript loading and execution until the page is rendered. One common solution is to place the &amp;lt;script&amp;gt; tag at the end of the &amp;lt;body&amp;gt; tag to ensure that the DOM is loaded first before executing any javascript. However, there are other equally good solutions. aysnc and defer attributes The &amp;lt;script&amp;gt; tags are placed in the &amp;lt;head&amp;gt; section with attributes async or defer. These atrributes tell the browser how to fetch and execute external scripts. The defer attribute tells the browser to load the script but not execute any Javacript until the DOM is ready (the document has been fully parsed and before the DOMContentLoaded event is fired). &amp;lt;script src=&quot;https://&quot; defer&amp;gt;&amp;lt;/script&amp;gt; The async attribute tells the browser to execute the external script asychronously. The HTML parser can continue parsing the page without waiting for the script to be executed. &amp;lt;script src=&quot;https://&quot; async&amp;gt;&amp;lt;/script&amp;gt; Check caniuse.com for browser compatibility of async and defer attributes. Dynamic insert There are some cases where you only want to load a script in certain situations. This is known as on-demand loading to avoid unnecessary requests. function insertScript(id, callback) { if (document.getElementById(id)) { return; } var scriptInDoc = document.getElementsByTagName('script')[0]; var script = document.createElement('script'); script.src = 'https://....'; script.id = id; script.onload = function() { callback(); } scriptInDoc.parentNode.insertBefore(script, scriptInDoc); } Conclusion Always incorporate JavaScript asynchronously and only load external scripts at the point when they are needed to avoid extra network requests.</summary></entry><entry><title type="html">10 Tips for clean code</title><link href="/2019/11/01/clean-code.html" rel="alternate" type="text/html" title="10 Tips for clean code" /><published>2019-11-01T00:00:00+01:00</published><updated>2019-11-01T00:00:00+01:00</updated><id>/2019/11/01/clean-code</id><content type="html" xml:base="/2019/11/01/clean-code.html">&lt;p&gt;I was listening to a YouTube video on Clean Code by &lt;a href=&quot;https://twitter.com/mtoppa&quot;&gt;Michael Toppa&lt;/a&gt; during a short break from work. This video is an awesome summary of what you should keep in my when you are coding.&lt;/p&gt;

&lt;p&gt;If you’ve come across a bit of nasty code that you wrote months ago and wondered how to refactor it using clean code, then the tips in this video are a good place to start.&lt;/p&gt;

&lt;p&gt;I highly recommend that you watch the video for more details (the video is at the end of this post). Below is the list of the 10 Tips he mentioned for making your code clean:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You are responsible for the quality of your code&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use meaningful names&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write code that expresses intent&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comments are often lies waiting to happen.
Code should speak for itself whenever possible&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boy Scout Rule: Leave the code better than you found it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Single Responsible Principle (SPR)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write tests (Test driven development (TDD))&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Work in short cycles: incremental and iterative&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Independent Architecture&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Practice, Practice, Practice!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/UjhX2sVf0eg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>thesimplearchitect</name></author><category term="learning" /><category term="education" /><summary type="html">I was listening to a YouTube video on Clean Code by Michael Toppa during a short break from work. This video is an awesome summary of what you should keep in my when you are coding. If you’ve come across a bit of nasty code that you wrote months ago and wondered how to refactor it using clean code, then the tips in this video are a good place to start. I highly recommend that you watch the video for more details (the video is at the end of this post). Below is the list of the 10 Tips he mentioned for making your code clean: You are responsible for the quality of your code Use meaningful names Write code that expresses intent Comments are often lies waiting to happen. Code should speak for itself whenever possible Boy Scout Rule: Leave the code better than you found it Single Responsible Principle (SPR) Write tests (Test driven development (TDD)) Work in short cycles: incremental and iterative Independent Architecture Practice, Practice, Practice!</summary></entry><entry><title type="html">How to start as a frontend web developer</title><link href="/2019/09/30/part1-howto-fe-web-developer.html" rel="alternate" type="text/html" title="How to start as a frontend web developer" /><published>2019-09-30T00:00:00+02:00</published><updated>2019-09-30T00:00:00+02:00</updated><id>/2019/09/30/part1-howto-fe-web-developer</id><content type="html" xml:base="/2019/09/30/part1-howto-fe-web-developer.html">&lt;p&gt;As someone who has worked in the software industry for a few years, I would like to share what I think are the essential things you should know if you are interested in becoming a frontend web developer. These are the things I wished I had taken more seriously when I started out as a full-stack web developer (trust me, I made many mistakes in my early days).&lt;/p&gt;

&lt;h2 id=&quot;1-learn-data-structures-and-algorithms&quot;&gt;1. Learn data structures and algorithms&lt;/h2&gt;

&lt;p&gt;It’s alright to use resources such as EggHead, Coursera and Codeacademy to learn how to create your first web application but in my honest opinion, understanding data structures and algorithms is crucial for any programmer, developer or computer scientist. Data structures will allow you to organize data in a way that can be used more efficiently and understanding algorithms is key to problem-solving.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check out &lt;a href=&quot;https://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/&quot;&gt;Top 10 Algorithms and Data Structures for Competitive Programming&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am hoping to cover data structures and algorithms in a separate article. Stay tuned!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-have-a-proper-understanding-of-javascript&quot;&gt;2. Have a proper understanding of Javascript&lt;/h2&gt;
&lt;p&gt;Javascript is a powerful language that can be both flexible and structured. Don’t do my mistake of thinking JQuery is a replacement for Javascript 😅. It’s not!&lt;/p&gt;

&lt;p&gt;Understanding concepts suchs as prototypes, modular design, and observer pattern will only help you to become a better Javascript developer (&lt;em&gt;for further reading, check out &lt;a href=&quot;https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15&quot;&gt;JavaScript Design Patterns&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&quot;3-css-and-html-markup-are-inseparable&quot;&gt;3. CSS and HTML markup are inseparable&lt;/h2&gt;
&lt;p&gt;One lesson I learned the hard way is that the way you write your HTML will determine how your clean and properly structured your CSS will be. If your HTML code is messy, you can bet that your CSS will be messy as well. It’s never too early to learn how to write proper HTML and CSS. I recommend ISOBAR’s Frontend &lt;a href=&quot;https://isobar-us.github.io/code-standards/#html_html&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://isobar-us.github.io/code-standards/#css_css&quot;&gt;CSS&lt;/a&gt; coding standards guide.&lt;/p&gt;

&lt;p&gt;If you are using web frameworks such as React, Vue or Angular, always stick to creating simple, single-responsible components with scoped CSS. Think of components as lego blocks that will be used to build larger features or modules.&lt;/p&gt;

&lt;h2 id=&quot;4-study-and-code-a-lot&quot;&gt;4. Study and code a lot&lt;/h2&gt;
&lt;p&gt;You can only get better by studing about programming, reading and writing code. Look for Javascript libraries and open-sourced projects on sites like &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt; to glean useful information on how to write clean and efficient code.&lt;/p&gt;

&lt;h2 id=&quot;conclusion-and-final-thoughts&quot;&gt;Conclusion and final thoughts&lt;/h2&gt;

&lt;p&gt;I highly recommend referring to the &lt;a href=&quot;https://developer.mozilla.org&quot;&gt;Mdn web docs&lt;/a&gt; to build your knowlegde of web development and clear any doubts you might have regarding CSS, HTML and Javascript.&lt;/p&gt;

&lt;p&gt;Becoming a skilled frontend developer takes time and effort, but with the right education, resources, tools and, most importantly, determination, you’ll definitely get there.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Goodluck on your journey!&lt;/em&gt;&lt;/p&gt;</content><author><name>thesimplearchitect</name></author><summary type="html">As someone who has worked in the software industry for a few years, I would like to share what I think are the essential things you should know if you are interested in becoming a frontend web developer. These are the things I wished I had taken more seriously when I started out as a full-stack web developer (trust me, I made many mistakes in my early days). 1. Learn data structures and algorithms It’s alright to use resources such as EggHead, Coursera and Codeacademy to learn how to create your first web application but in my honest opinion, understanding data structures and algorithms is crucial for any programmer, developer or computer scientist. Data structures will allow you to organize data in a way that can be used more efficiently and understanding algorithms is key to problem-solving. Check out Top 10 Algorithms and Data Structures for Competitive Programming. I am hoping to cover data structures and algorithms in a separate article. Stay tuned! 2. Have a proper understanding of Javascript Javascript is a powerful language that can be both flexible and structured. Don’t do my mistake of thinking JQuery is a replacement for Javascript 😅. It’s not! Understanding concepts suchs as prototypes, modular design, and observer pattern will only help you to become a better Javascript developer (for further reading, check out JavaScript Design Patterns) 3. CSS and HTML markup are inseparable One lesson I learned the hard way is that the way you write your HTML will determine how your clean and properly structured your CSS will be. If your HTML code is messy, you can bet that your CSS will be messy as well. It’s never too early to learn how to write proper HTML and CSS. I recommend ISOBAR’s Frontend HTML and CSS coding standards guide. If you are using web frameworks such as React, Vue or Angular, always stick to creating simple, single-responsible components with scoped CSS. Think of components as lego blocks that will be used to build larger features or modules. 4. Study and code a lot You can only get better by studing about programming, reading and writing code. Look for Javascript libraries and open-sourced projects on sites like Github to glean useful information on how to write clean and efficient code. Conclusion and final thoughts I highly recommend referring to the Mdn web docs to build your knowlegde of web development and clear any doubts you might have regarding CSS, HTML and Javascript. Becoming a skilled frontend developer takes time and effort, but with the right education, resources, tools and, most importantly, determination, you’ll definitely get there. Goodluck on your journey!</summary></entry><entry><title type="html">Design tokens with Theo</title><link href="/2019/09/26/theo.html" rel="alternate" type="text/html" title="Design tokens with Theo" /><published>2019-09-26T00:00:00+02:00</published><updated>2019-09-26T00:00:00+02:00</updated><id>/2019/09/26/theo</id><content type="html" xml:base="/2019/09/26/theo.html">&lt;p&gt;In my never ending quest in finding the right CSS structure that will allow easy theming, I have done a lot of reading and research into design tokens and how this will help me achieve my aim of writing CSS that can easily be overriden with little effort.&lt;/p&gt;

&lt;p&gt;In short, design tokens are used to avoid hardcoded values that are reusable in your CSS. Design tokens are used to store variables such as typography, spacing and colours that will be shared across plaforms like web, iOS and Android. It’s a very similar concept with CSS variables, which contains values that are reused throughout a document. (https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)&lt;/p&gt;

&lt;p&gt;It was during a discussion I had with a coworker abour CSS refactoring and design tokens that I discovered the existence of Theo. Theo is a tool developed by Salesforce that helps you automate the generation of your design tokens. Theo consumes JSON or YAML design token files and transforms the configured values into the format that best suits your needs.&lt;/p&gt;

&lt;p&gt;Below is a very simple JSON design token file (raw.json):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;global&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;props&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-family&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Arial, sans-serif&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size-x-small&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size-small&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;11px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size-normal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;13px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size-large&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;22px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size-x-large&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;24px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-size&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight-light&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight-normal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;400&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight-bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;600&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight-bolder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;700&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;font-weight&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can then choose to output this raw values as SASS variables&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;theo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;raw.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scss&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// save
&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Something went wrong: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-size-x-small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-weight-bolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-size-large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-size-normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-size-x-large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-size-small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-weight-bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-weight-normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$font-weight-light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Below is a very simple YAML design token file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#000'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#fff'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;colors&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Isn’t it just neat? It just works and your design tokens can easily be are sorted into categories. For smaller applications and personal projects, it’s a no brainer that Theo is a perfect soluton. I have yet to use Theo in a large-scale but I am confident that it would work just as well.&lt;/p&gt;

&lt;p&gt;If your still doubtful, Why not give Theo a shot and see how you like it 😁&lt;/p&gt;

&lt;h4 id=&quot;recommended-readings&quot;&gt;Recommended readings&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/salesforce-ux/theo-example&quot;&gt;Theo Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/what-are-design-tokens/&quot;&gt;What Are Design Tokens?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/eightshapes-llc/tokens-in-design-systems-25dd82d58421&quot;&gt;Tokens in Design Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>thesimplearchitect</name></author><category term="css" /><category term="javascript" /><summary type="html">In my never ending quest in finding the right CSS structure that will allow easy theming, I have done a lot of reading and research into design tokens and how this will help me achieve my aim of writing CSS that can easily be overriden with little effort. In short, design tokens are used to avoid hardcoded values that are reusable in your CSS. Design tokens are used to store variables such as typography, spacing and colours that will be shared across plaforms like web, iOS and Android. It’s a very similar concept with CSS variables, which contains values that are reused throughout a document. (https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) It was during a discussion I had with a coworker abour CSS refactoring and design tokens that I discovered the existence of Theo. Theo is a tool developed by Salesforce that helps you automate the generation of your design tokens. Theo consumes JSON or YAML design token files and transforms the configured values into the format that best suits your needs. Below is a very simple JSON design token file (raw.json): { &quot;global&quot;: { &quot;type&quot;: &quot;font&quot;, &quot;category&quot;: &quot;font&quot; }, &quot;props&quot;: { &quot;font-family&quot;: { &quot;value&quot;: &quot;Arial, sans-serif&quot;, &quot;category&quot;: &quot;font&quot; }, &quot;font-size-x-small&quot;: { &quot;value&quot;: &quot;10px&quot;, &quot;category&quot;: &quot;font-size&quot; }, &quot;font-size-small&quot;: { &quot;value&quot;: &quot;11px&quot;, &quot;category&quot;: &quot;font-size&quot; }, &quot;font-size-normal&quot;: { &quot;value&quot;: &quot;13px&quot;, &quot;category&quot;: &quot;font-size&quot; }, &quot;font-size-large&quot;: { &quot;value&quot;: &quot;22px&quot;, &quot;category&quot;: &quot;font-size&quot; }, &quot;font-size-x-large&quot;: { &quot;value&quot;: &quot;24px&quot;, &quot;category&quot;: &quot;font-size&quot; }, &quot;font-weight-light&quot;: { &quot;value&quot;: &quot;200&quot;, &quot;category&quot;: &quot;font-weight&quot; }, &quot;font-weight-normal&quot;: { &quot;value&quot;: &quot;400&quot;, &quot;category&quot;: &quot;font-weight&quot; }, &quot;font-weight-bold&quot;: { &quot;value&quot;: &quot;600&quot;, &quot;category&quot;: &quot;font-weight&quot; }, &quot;font-weight-bolder&quot;: { &quot;value&quot;: &quot;700&quot;, &quot;category&quot;: &quot;font-weight&quot; } } } I can then choose to output this raw values as SASS variables theo.convert({ transform: { type: &quot;web&quot;, file: &quot;raw.json&quot; }, format: { type: &quot;scss&quot; } }) .then(scss =&amp;gt; { // save }) .catch(error =&amp;gt; console.log(`Something went wrong: ${error}`)); The output: $font-family: Arial, sans-serif; $font-size-x-small: 10px; $font-weight-bolder: 700; $font-size-large: 22px; $font-size-normal: 13px; $font-size-x-large: 24px; $font-size-small: 11px; $font-weight-bold: 600; $font-weight-normal: 400; $font-weight-light: 100; Below is a very simple YAML design token file: props: black: value: '#000' white: value: '#fff' global: type: colors category: colors Isn’t it just neat? It just works and your design tokens can easily be are sorted into categories. For smaller applications and personal projects, it’s a no brainer that Theo is a perfect soluton. I have yet to use Theo in a large-scale but I am confident that it would work just as well. If your still doubtful, Why not give Theo a shot and see how you like it 😁 Recommended readings Theo Github What Are Design Tokens? Tokens in Design Systems</summary></entry><entry><title type="html">I started blogging…again!</title><link href="/2019/07/17/first-post.html" rel="alternate" type="text/html" title="I started blogging...again!" /><published>2019-07-17T00:00:00+02:00</published><updated>2019-07-17T00:00:00+02:00</updated><id>/2019/07/17/first-post</id><content type="html" xml:base="/2019/07/17/first-post.html">&lt;p&gt;This is my second attempt at writing a tech blog. I’m hoping I stick with it this time 🤞.&lt;/p&gt;

&lt;p&gt;I’ve been trying to find the right flat-file CMS that requires minimum time to set up and I discovered Jekyll. After about 4 hours, I have a blog hosted on github pages.&lt;/p&gt;

&lt;p&gt;This blog is primarily focused on frontend development but there will occassionally be other articles on other areas of IT and Computer Science.&lt;/p&gt;

&lt;p&gt;I hope you find this blog insightful. Happy reading 🙂!&lt;/p&gt;</content><author><name>thesimplearchitect</name></author><summary type="html">This is my second attempt at writing a tech blog. I’m hoping I stick with it this time 🤞. I’ve been trying to find the right flat-file CMS that requires minimum time to set up and I discovered Jekyll. After about 4 hours, I have a blog hosted on github pages. This blog is primarily focused on frontend development but there will occassionally be other articles on other areas of IT and Computer Science. I hope you find this blog insightful. Happy reading 🙂!</summary></entry></feed>