{"hash":"65b3f68487c510fe0caeeebfc061550876083cf7","data":{"post":{"id":"9317a9b9f12923c3e0b7bb23a2269973","title":"Algorithm: P versus NP problem","tags":"complexity algorithm computer-science big-o-notation","date":"2020-11-30","content":"<p>Most people who are studying or studied computer science have come across the P verse NP problem. It's one of those topics that you are taught in university and will most like promptly forget about when graduation comes around and you start working in the industry. I have honestly not paid much attention to it until recently.</p>\n<p>What is P versus NP and why is it important?</p>\n<p>The P versus NP problem is an unsolved problem in computer science that tries to determine if an algorithm that can be verified in polynomial time can also be solved in polynomial time.</p>\n<p>In this post, I'll give an introduction into P, NP, NP-Hard and NP-Complete and why this is such an important problem. There will also be references to time complexity so I highly recommend reading up on it or checking out the resources I listed in my post <a href=\"/blog/2020/04/04/learn-big-o-notation/\">Learning Big O notation as a Javascript developer</a>.</p>\n<h3 id=\"p-deterministic-polynomial-time\"><a href=\"#p-deterministic-polynomial-time\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>P (deterministic polynomial time)</h3>\n<p>P problems are the set of problems that have been solved and verified in polynomial time (o(n)<sup>k</sup>). Examples include linear sort, merge sort, binary search, bubble sort and insertion sort.</p>\n<p>Let's take the bubble sort example. The bubble sort algorithm goes through a sortable array of numbers and swaps the adjacent elements if they are in the wrong order.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span>\n  <span class=\"token keyword\">let</span> indicator <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> indicator <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    indicator <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp\n        indicator <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>The above is a variant of the algorithm. The indicator variable will track if any of the elements have been swapped and will also indicate if the array is already sorted. The worst-case scenario is O(n<sup>2</sup>) if the array is not sorted and O(n) otherwise.</p>\n<p>Let's consider another very simple example. We want to calculate the sum of each row in a two-dimensional array and output the sum for each row in an array. We have the algorithm below to do so:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>The time complexity of this algorithm is O(n<sup>m</sup>) where m is the number of dimensions (2 in this case) and n is the size of each array.</p>\n<p>Taking the two examples above, we can easily see that logic used to deduce a solution for the bubble sort can easily be applied to the second problem.</p>\n<p>However, there exist a set problems that have only been proven to be solved with an exponential-time algorithm (O(2<sup>n</sup>)). These problems are known as NP problems.</p>\n<figure>\n<img src =\"/p_np.png\" style=\"max-width: 100%\" />\n<figcaption>Diagram of P ≠ NP (left) and P = NP (right). It is widely believed that P ≠ NP.</figcaption>\n</figure>\n<h3 id=\"np-non-deterministic-polynomial-time\"><a href=\"#np-non-deterministic-polynomial-time\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NP (non-deterministic polynomial time)</h3>\n<p>NP problems consist of the set of problems whose solution can be verified in polynomial time but there is no known algorithm that can easily solve them. Examples include 0-1 Knapsack, the traveling salesman, boolean satisfiability problem, and the subset sum problem. P problems were once NP problems proven to be solvable in polynomial time.</p>\n<p>NP complexity class of problems can be broken down into three sets: NP, NP-Hard, and NP-Complete.</p>\n<h3 id=\"np-hard-and-np-complete\"><a href=\"#np-hard-and-np-complete\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NP-Hard and NP-Complete</h3>\n<p>For a problem to belong to the NP set, it has to be a decision problem with solutions of polynomial length.</p>\n<p>NP-hardness refers to the set of problems that are at least as hard as the hardest problems in NP. The hardest of these problems are NP-Complete. If you take a look at the diagram above of P ≠ NP, you can see that NP-Hard problems cab be neither NP-Complete nor NP. These problems are difficult or impossible to check if they are decidable (returning a true of false value). An example of an NP is the halting problem. The halting problem tries to verify if given an algorithm, will it halt or continue in an infinite loop. There is no existing algorithm that can prove if a function will halt or run forever.</p>\n<p>NP-Complete problems are NP-Hard problems that have been proven to be decidable in polynomial time (NP-Complete is a subset of NP and NP-Hard). A very good is Sudoku. In an NxN grid where N is the number of rows and columns, the number in a cell should be unique for it's row and column. When a Sudoku grid is solved, it's fairly easy to verify the solution:</p>\n<p>Here is a quick solution using a nested loop that checks if each row in the grid has a unique value.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> grid <span class=\"token operator\">=</span> <span class=\"token function\">completeGrid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> isSolved <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> unique <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> cell <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n      \n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unique<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        isSolved <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token punctuation\">}</span>\n\n      unique<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> \n  <span class=\"token punctuation\">}</span></code></pre>\n<p>The time complexity for the alogirithm will alway be O(n<sup>n</sup>) irrespective of how large the grid is. The question is what is the complexity of the <code>completeGrid</code> function.</p>\n<p>This is different when we want to write an algorithm that can solve an NxN sudoku grid where N can be a very large number.</p>\n<h3 id=\"why-is-the-p-versus-np-problem-important\"><a href=\"#why-is-the-p-versus-np-problem-important\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Why is the P versus NP problem important?</h3>\n<p>If it can be proven to solve just one problem in NP-Complete polynomial time, all NP problems become P problems. That means that problems that we taught were initially hard will become very easy to solve. This will open to a vast improvement and milestones in technology such as in the field of medicine where we can easily find cures to complex diseases and even cancer. However, it would pose a significant negative impact on crytopgraphy, which depends on algorithms that are NP-hard.</p>\n<div class=\"divider\"></div>\n<h3 id=\"resources\"><a href=\"#resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resources</h3>\n<ul>\n<li><strong>Introduction to Algorithms</strong> by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein</li>\n<li><a href=\"https://www.youtube.com/watch?v=YX40hbAHx3s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">P vs. NP and the Computational Complexity Zoo</a> (Youtube video)</li>\n<li><a href=\"https://www.youtube.com/watch?v=e2cF8a5aAhE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NP-Hard and NP-Complete Problems</a> (Youtube video)</li>\n<li><a href=\"https://news.mit.edu/2009/explainer-pnp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Explained: P vs. NP</a></li>\n</ul>\n","path":"/blog/2020/11/30/p-versus-np-problem/","timeToRead":5}},"context":{}}